<!DOCTYPE html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>R2W case: <%= caseID; %></title>
<!-- <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"> -->
<link rel="stylesheet" href="/V2/css/jquery-ui.min.css">
<link rel="stylesheet" href="/V2/css/styles.css">
<style>
  .ui-autocomplete {
      max-height: 200px;
      overflow-y: auto;
      /* prevent horizontal scrollbar */
      overflow-x: hidden;
    }
    /* IE 6 doesn't support max-height
    * we use height instead, but this forces the menu to always be this tall
    */
    * html .ui-autocomplete {
        height: 200px;
    }


    div.qr {
        text-align:center;
        float:right;
    }
    #qrcode img{
        width:128px;
        margin: 0 auto;
    }
    @media only screen and (max-width: 800px) {
        div.qr{
          display:none;
        }
    }
</style>

<script src="/V2/js/qrcode.min.js"></script>
<script src="/V2/js/jquery.min.js"></script>
<!-- <script src="https://code.jquery.com/jquery-1.12.4.js"></script> -->
<script src="/V2/js/R2W.js"></script>
<!-- <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script> -->
<script src="/V2/js/jquery-ui.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

</head>
<body>


<!-- Mobile Top Navigation Menu -->
<div class="block"></div>

<div class="mobile-nav">
    <a href="/" class="active pagelink" onclick="$('.panel').hide();$('#intro').show();">
<img src="/V2/images/R2Wlogo.svg" height="18px" align="top">
    &nbsp;
    R2W 
    </a>
    <!-- Navigation links -->
    <div id="myLinks">
      <a href="/index#list_case" class="pagelink">&lt; List Cases</a>
      <a href="#case_attr" class="pagelink" onclick="setPage('#case_attr');">Case attributes</a>
      <a href="#case_event_page" class="pagelink" onclick="setPage('#case_event_page');">Case Events</a>
      <a href="#manage_evt" class="pagelink" onclick="setPage('#manage_evt');">Manage Events</a>
      <a href="#" class="pagelink" onclick="logout()">Logout</a>
    </div>
    <!-- "Hamburger menu" / "Bar icon" to toggle the navigation links -->
    <a href="javascript:applinks();" class="icon">
      <i class="fa fa-bars"></i>
    </a>
</div>

<div class="mobile-spacer">
<br><br>
</div>

<!-- Mobile Top Navigation Menu -->

<div class="paper">


<div id="qrcode" class="qr"></div>

<div class="panel3" id="intro">
  <h1>
  Case ID: <%= caseID; %>
  </h1>
  <b><%= user; %></b> logged in as <b><%= role; %></b>
</div>


    <div class="panel3" id="case_attr">
        <h2>Case attributes</h2>
        <div id="case_attributes" class="FForm">Loading...</div>
        
        <div class="submit_container">
            <span id="update_case_status"></span>
            <button onclick="update_case_record()">Update record</button>
        </div>
        
        <div id="case_attributes_debug" class="debug"></div>
    </div>

</div>


<div class="panel_wide" id="case_event_page">
  <div class="paper" style="clear:both;">
      <h2>Case events</h2>
        <!--
        Current guiding template for next Event suggestion: <select id="template-select">
          <option value="templateA">templateA</option> 
        </select> 
        -->
  </div>
  


  <div id="case_events" style="width:100%">
    <div class="paper">Initialising timeline...</div>
  </div>


</div>

<script>
//caseID exists?
function check_case_exist(){
    var url = `/api/v1/cases/caseexists/<%= caseID; %>`;
    jqxhr = get(url,function (data){
        
        if(data == 0){
            alert("case not found");
            //switch to editor
            
        }else{
            get_case_by_id();
            get_case_event();
            makeQR();
        }
    });
}
//request json for a specific feature
function get_case_by_id(){
  var url = `/api/v1/cases/getcase/<%= caseID; %>`;
  jqxhr = get(url, function (data) {
    // $("#case_attributes_debug").html(JSON.stringify(data[0]._fields[0].properties));
    
    get("/admin/users", function (userdata) {
        var users = _.filter(userdata, function(d) { return d.group == "ADMIN" || d.group == "EDITOR" });
        users = _.map(users, function(d) { return d.username; });
    
        $("#case_attributes").html(makeform(data,[
            {key:"phsVolunteer",label:"PHS member",type:"select",candidate:users,placeholder:"Internal identifier"},
            {key:"secretary",label:"Secretary",type:"text",placeholder:"Internal identifier"},
            //{key:"secretary_number",label:"Number",type:"number",placeholder:""},
            //{key:"Location",label:"Ward name",type:"text",placeholder:"Ward name"},
            {key:"Location",label:"Ward name",type:"select",candidate:<%- JSON.stringify(Wards) %>,placeholder:"Ward name"},
            {key:"Template",label:"Guide Template",type:"select",candidate:<%- JSON.stringify(Template) %>,placeholder:"guiding template for next Event suggestion"},
            {key:"link",label:"Link to files",type:"link",placeholder:"Link to files and documents"},
            {key:"notes",label:"Notes",type:"textarea",placeholder:"Write additional comments here"},
            //{key:"dateLogged",label:"dateLogged",type:"hidden"},
            {key:"caseID",label:"caseID",type:"hidden"}
        ]));
        
        $(".submit_container").show();
        $("#case_attributes_debug").html(JSON.stringify(data));
        ///////////////
        $("#case_attributes #Template").on('change', function(d){
          get_timeline_data(0); //timeline change
        })
        /////////////
     });
  });
}
function get_case_event(){
  var url = `/api/v1/cases/getcaseeventV2/<%= caseID; %>`;
  jqxhr = get(url, function (data) {
    $("#case_events_debug").html(JSON.stringify(data));
  });
}
function makeQR(){
    var data = "view/case/<%= caseID; %>";
    new QRCode("qrcode", {text:data, width: 128, height: 128});
    console.log(data);
}
function update_case_record(){
    inputs = parseform("#case_attributes .editor");
    console.log(inputs);
    if (inputs.status){
        $("#update_case_status").html("updating");
        xhr = post('/api/v1/cases/updatecase/<%= caseID; %>',inputs.param,function(d){
            console.log(d);
            if ("status" in d){
                if(d.status){
                    $("#update_case_status").html(`updated`);
                }
            }else{
                $("#update_case_status").html("error");
            }
        })
        
    }
    
    
}

function load_timeline(){
    $.ajax({
        url: '/V2/timelineV2.html',
        cache: false,
        dataType: "html",
        success: function(data) {
            $("#case_events").html(data);
            $("#case_events").ready(function(d){
                get_timeline_data(0)
            });
        }
    });
}
function get_timeline_data(update){
    var url = `/api/v1/cases/getcaseeventV2/<%= caseID; %>`;
    jqxhr = get(url, function (data) {
        tmp = process_data(data);
        if (tmp.nodes.length > 0){
            ctl.data = tmp;
            
            
            
            //add_from_template(ctl.data,$("#template-select").val()); //experimental add templated nodes 
            add_from_template(ctl.data,$("#Template").val()); 
            //ctl.update();
            
            
            if(!update){

                ctl.view_extent();
            }
        }else{
            //nothing found in the case itself, prompt user 
            tmpnodes = [ctl.data.nodes[0]];
            ctl.data.nodes = tmpnodes;
            ctl.data.nodes[0].properties.Label = "Awareness"
            ctl.data.nodes[0].draw.status = "template"
            ctl.data.edges = []
            ctl.update();
        }
    });
}

// on load
check_case_exist();

load_timeline();


// handle click on timeline items
var eventID = null;
var createlinkBln = 0;
function item_clicked(d){

    if(createlinkBln && eventID){
        
        if (eventID == d.id){
            alert("self-loop disabled");
            link_record_cancel()
            return false;
        }
        //need review below
        try{
        if (_.find(ctl.data.nodes,{id:eventID}).draw.startX > _.find(ctl.data.nodes,{id:d.id}).draw.startX){
            alert("past event depending on a future event disabled");
            link_record_cancel()
            return false;
        }}
        catch(e){console.warn(e)}
        
        get(`/api/v1/cases/eventevent/${eventID}/${d.id}`,function(d){
            if (d.length){
                $("#prompt").html("link created");
            }else{
                $("#prompt").html("link error");
            }
            get_timeline_data(1);

        })
        link_record_cancel()
        return false;
    }
    
    // experimental
    ctl.zoom_to_item(d.id);
    
    if (!isNaN(d.id)){
        eventID = d.id;
        $("#update_event_status").html("");
        
        var data = d.properties;
        var manage_form = makeform(data,[
            {key:"Label",label:"Label",type:"text"},
            {key:"Completed",label:"Completed",type:"boolean"},
            {key:"eventStartDate",label:"Start date",type:"date"},
            {key:"eventDueDate",label:"Due date",type:"date"},
            {key:"eventCompletedDate",label:"Completed date",type:"date"},
            {key:"Expected_Duration",label:"Expected duration",type:"number"},
            {key:"Notes",label:"Notes",type:"textarea",placeholder:"Write additional comments here"}
        ])
        $("#manage_event").html(manage_form);
        
        $(".manage_event_btn").show()
        
        
        if (d.draw.status == "template"){
            $("#btn_del").hide()
            $("#btn_link").hide()
        }else{
            $("#btn_del").show()
            $("#btn_link").show()
        }
        //////////////////////////////////////
        //set visibility based on content in client
        //var completed = $("#manage_event #Completed").val();
        function completed_change(){
            var completed = $("#manage_event #Completed").is(":checked");
            if (!completed){
                 $("#manage_event .row-eventDueDate").show();
                 $("#manage_event .row-Expected_Duration").show();
                 $("#manage_event .row-eventCompletedDate").hide();
            }else{
                 $("#manage_event .row-eventDueDate").hide();
                 $("#manage_event .row-Expected_Duration").hide();
                 $("#manage_event .row-eventCompletedDate").show();
                 
                //add the due date as completed date as a start
               
               var duedate = $("#manage_event #eventDueDate").val();
               $("#manage_event #eventCompletedDate").val(duedate);
            }
        }
        completed_change();
        $("#manage_event #Completed").on('change', function(d){
            completed_change();
        })
        //update due date if expected duration changes
        function modify_due_date(){
            newdate = addDays(get_date_from_str($("#manage_event #eventStartDate").val()), Number($("#manage_event #Expected_Duration").val()))
             $("#manage_event #eventDueDate").val(formatDate(newdate))
        }
        $("#manage_event #Expected_Duration").on('change', function(d){
            modify_due_date()
            
        })
        
        //check if completed date or due date is later than start date
        function check_completed_date(){
            var startdate = get_date_from_str($("#manage_event #eventStartDate").val())
            var completedate = get_date_from_str($("#manage_event #eventCompletedDate").val())
            if (completedate < startdate){
                completedate = startdate;
            }
            $("#manage_event #eventCompletedDate").val(formatDate(completedate))
        }
        //$("#manage_event #eventCompletedDate").on('change', function(d){
            check_completed_date()
        //})
        
        //update expected duration when due date changes
        function modify_expected_duration(){
            days = (get_date_from_str($("#manage_event #eventDueDate").val())-get_date_from_str($("#manage_event  #eventStartDate").val()))/86400000
             $("#manage_event #Expected_Duration").val(days);
        }
        $("#manage_event #eventDueDate").on('change', function(d){
            modify_expected_duration()
        })
        //update due date if startdate changes, based on expected duration
        $("#manage_event #eventStartDate").on('change', function(d){
            modify_due_date()
        })
        

        //////////////////////////////////////
        //list dependencies
        getDependencies(eventID)
        
      
          ////////////////////////
          $("#add_event_container").hide()
          $("#edit_event_container").show()
          
          //////////////////////////////////////
          scrollTo("#edit_event_title");
          setPage("#manager_evt");
          //////////////////////////////////////
          
        init_auto_complete();
            
    }else{
      add_new_event(d);
      
   }
    

}

function init_auto_complete(){

    //todo: load this from templateA
    /*
    var availableTags = [
      "Awareness", "Nal Committee Formation", "Secretary Selection", "Document Collection", "Signature / thumbprints on the documents", "Create Settlement Map", "Filling Online form", "LP Authorisation and signature on documents ", "Challan ", "Photocopy of the File", "Dispatch orginal File", "Visit Confirmation by JE", "Response Letter_JE", "JE Visit", "Document Verification", "JE Report", "MS Site Visit", "MS Report to JE", "File passed to AE for approval of P form", "P Form Conditional ", "P Form", "Condition: Individual tap water permission", "Condition: ", "P Form + C Form LP signature", "Road Permision ", "Challan for Road Permission", "Challan for Road Permission Photocopy", "AE, SE, JE Maintenace signature - Road permission", "Challan for Road Permission Photocopy attach to PHS file", "Deposit of tap connection to be paid", "Photo copy of the Deposit reciept to be attached to the PHS file", "Original Reciept to be handed over to Nal Committee Secretary ", "C Form Nal Secretary signature", "SEWW signature on C Form", "HC BIlling signature on C Form", "Inform Nal committee for Meter connection", "Meter card to be signed by SEWW", "Form No. 32 to be filled and attached to the original file", "File certification by AE and SEWW", "Work order by JE Water Chowki", "JE to sign the file in Water Chowki", "Nal Committee to be ready with pipes and plumber", "Trench - Gang from water chowki", "Connection installed"
    ];
    */
    var availableTags = <%-  JSON.stringify(EventLabels) %>
    console.log(availableTags)
    $("#manage_event #Label").autocomplete({
      source: availableTags
    });
    $("#add_event #Label").autocomplete({
      source: availableTags
    });
    
}


function update_event_record(){



    if (eventID){
        if (!isNaN(eventID)){
        
            inputs = parseform("#manage_event .editor");
            console.log(inputs);
            
            if (!inputs.param.Label){
                return;
            }
            
            if (inputs.status){
                $("#update_event_status").html("updating");
                xhr = post('/api/v1/cases/updateevent/'+eventID,inputs.param,function(d){
                    console.log(d);
                    if ("status" in d){
                        if(d.status){
                            $("#update_event_status").html(`updated`);
                            get_timeline_data(1);
                        }
                    }else{
                        $("#update_event_status").html("error");
                    }
                })
                
            }
        }
    }
    
}
function add_event_record(){

    console.log("add event")
    inputs = parseform("#add_event .editor");
    if (inputs.status){
    
        //Note: this adds the new event only, does not deal with Event-Event connection
        //POST api/v1/cases/linkevents {startNodeId,endNodeId}
        
        $("#add_event_status").html("adding");
        
        //find previous id
        inEdges = _.filter(ctl.data.edges, {endNodeId:eventID})
        var prevID = "";
        if (inEdges.length){
            prevEventId = inEdges[0].startNodeId
            if (!isNaN(prevEventId)){
                prevID = "/"+prevEventId
            }
        }
        xhr = post('/api/v1/cases/addevent/<%= caseID; %>'+prevID,inputs.param,function(d){
            console.log(d);
            if ("status" in d){
                if(d.status){
                    $("#update_event_status").html(`updated`);
                    get_timeline_data(1); //update ctl
                    
                    $("#add_event").html("");
                    $(".add_event_btn").hide();
                }
            }else{
                $("#add_event_status").html("error");
            }
        })

    }

}


</script>


<script>
function add_new_event_str(str){
  try{
    var d = JSON.parse(unescape(str));
    add_new_event(d);
    
    ctl.zoom_to_item(d.id);
    ctl.set_active(d.id);
  }catch(e){
    console.log(e)
  }
}


function add_new_event(d){
  var today = new Date();
  today.setMinutes(0)
  today.setHours(1)

  if(!d){
    d = { id: "new",
          properties: {
            eventStartDate: addDays(today,0),
            eventDueDate:addDays(today,7),
            Expected_Duration:7
          }
        }
  }

  eventID = d.id;
  $("#add_event_status").html("");

  var data = d.properties;
  var manage_form = makeform(data,[
    {key:"Label",label:"Label",type:"text",placeholder:"start typing here for autocomplete suggestions"},
    {key:"Completed",label:"Completed",type:"boolean"},
    {key:"eventStartDate",label:"Start date",type:"date"},
    {key:"eventDueDate",label:"Due date",type:"date"},
    {key:"eventCompletedDate",label:"Completed date",type:"date"},
    {key:"Expected_Duration",label:"Expected duration",type:"number"},
    {key:"Notes",label:"Notes",type:"textarea",placeholder:"Write additional comments here"}
  ],"newevent")
  $("#add_event").html(manage_form);

  $(".add_event_btn").show()


    //////////////////////////////////////
  //set visibility based on content in client
  //var completed = $("#manage_event #Completed").val();
  // note repeated from manage_event form, to be reviewed

  function completed_change2(){
      var completed = $("#add_event #neweventCompleted").is(":checked");
      if (!completed){
           $("#add_event .row-eventDueDate").show();
           $("#add_event .row-Expected_Duration").show();
           $("#add_event .row-eventCompletedDate").hide();
      }else{
           $("#add_event .row-eventDueDate").hide();
           $("#add_event .row-Expected_Duration").hide();
           $("#add_event .row-eventCompletedDate").show();
           
           //add the due date as completed date as a start
           var duedate = $("#add_event #eventDueDate").val();
           $("#add_event #eventCompletedDate").val(duedate);
      }
  }
  completed_change2();
  $("#add_event #neweventCompleted").on('change', function(d){
      completed_change2();
  })
  //update due date if expected duration changes
  function modify_due_date2(){
      newdate = addDays(get_date_from_str($("#add_event #eventStartDate").val()), Number($("#add_event #Expected_Duration").val()))
       $("#add_event #eventDueDate").val(formatDate(newdate))
  }
  $("#add_event #Expected_Duration").on('change', function(d){
      modify_due_date2()
      
  })

  //check if completed date or due date is later than start date
  function check_completed_date(){
      var startdate = get_date_from_str($("#manage_event #eventStartDate").val())
      var completedate = get_date_from_str($("#manage_event #eventCompletedDate").val())
      if (completedate < startdate){
          completedate = startdate;
      }
      $("#add_event #eventCompletedDate").val(formatDate(completedate))
  }
  $("#add_event #eventCompletedDate").on('change', function(d){
      //check_completed_date()
  })

  //update expected duration when due date changes
  function modify_expected_duration2(){
      days = (get_date_from_str($("#add_event #eventDueDate").val())-get_date_from_str($("#add_event  #eventStartDate").val()))/86400000
       $("#add_event #Expected_Duration").val(days);
  }
  $("#add_event #eventDueDate").on('change', function(d){
      modify_expected_duration2()
  })
  //update due date if startdate changes, based on expected duration
  $("#add_event #eventStartDate").on('change', function(d){
      modify_due_date2()
  })
  ////////////////////////
  $("#add_event_container").show()
  $("#edit_event_container").hide()
  ////////////////////////
  scrollTo("#add_event_title");
  /////////////////////////
  init_auto_complete();
  ////////////////////////
  ctl.clear_active()
  
}
</script>


   
    

<div class="flexcontainer" id="edit_event_container" style="display:none">

    <div class="flexitem depends">
        <h5>Directly depends on &lt;</h5>
        <div id="previous">

        </div>
    </div>


    <div class="flexitem" id="manage_evt">   

               
        <h2 id="edit_event_title">Edit selected Event</h2>
        <div id="manage_event" class="FForm">Select an item in the timeline to edit</div>
        <div class="manage_event_btn" style="display:none;text-align:right">
            <span id="update_event_status"></span>
            <button id="btn_del" onclick="delete_event_record()">Delete Event</button>
            <button onclick="update_event_record()">Update Event</button>
        </div>
        
        
        <div class="manage_event_btn" style="display:none">
        <!--
        experimental:<br>
          <button id="btn_link" onclick="link_record_init()">Link from Event to another</button>
          -->
          <div id="prompt"></div>

          <!--
          to delete
          del("/api/v1/cases/eventevent/SOURCE/TARGET",{},function(d){console.log(d)})
          -->
        </div>

    </div>

           <div class="flexitem depends">
        <h5>&gt; Directly enables</h5>
        <div id="next">

        </div>
    </div>

</div>


<div class="paper">
  <button onclick="add_new_event()">Add a new Event</button><br>
  or add a new event guided by template (dashed Event in timeline)
  <div id="potential_add_from_template"></div>
</div>


<div class="paper" id="add_event_container" style="display:none">
    <h2 id="add_event_title">Add Event</h2>
    <div id="add_event" class="FForm"></div>
    <div class="add_event_btn" style="display:none;text-align:right">
        <span id="add_event_status"></span>
        <button onclick="add_event_record()">Add Event</button>
    </div>
</div>
<br>


    

<script>
//list backward and forward item

function getDependencies(eventid){

    if (!isNaN(eventID)){
      get(`/api/v1/cases/event/${eventid}/forward`,function(d){
          console.log("foward")
          console.log(d)
          
          get(`/api/v1/cases/event/${eventid}/pforward`,function(d2){
              list_nodes("next", d, d2)
          })
      })
      
      get(`/api/v1/cases/event/${eventid}/backward`,function(d){
          console.log("back")
          console.log(d)
          
          get(`/api/v1/cases/event/${eventid}/pbackward`,function(d2){
              list_nodes("previous", d, d2)
          })
      })
    }else{
      //clear prompts
      list_nodes("next", [], [])
      
      //here assuming the id is a template Event
      //find the edge in graph linked to the template
      //
      var innodes = []
      var inedge = _.find(ctl.data.edges,{endNodeId: eventID})
      if (inedge){
        var innode = _.find(ctl.data.nodes,{id: inedge.startNodeId})
        if (innode){
          innodes.push({"event":{"identity":{"low":innode.id,"high":0},"properties":{"Label":innode.properties.Label}}})
        }
      }
      console.log(innodes);
      list_nodes("previous", innodes, []) //[{"event":{"identity":{"low":10,"high":0},"properties":{"Label":label}]
    }
    
}
function list_nodes(domid, data, potentials){
    var htmlStr = "";
    
    //if (!isNaN(eventID)){
        for (var i in data){
            var eid = toNumber(data[i]['event']['identity']);
            var elabel = data[i]['event']['properties']['Label'];
            
            //var d = _.find(ctl.data.nodes, {id:eid});
            //htmlStr += `<button onclick="depend_item_clicked(${eid})" class="${d.draw.status}">`;
            
            htmlStr += `<button onclick="depend_item_clicked(${eid})">`;
            //item_clicked(d)
            htmlStr += elabel;
            htmlStr += "</button>";
            
            //if domid is previous then rmlink(previousID,eventID)
            if (domid == "previous"){
            htmlStr += ` <button onclick="rm_link(${eid},${eventID})" class="delBtn">X</button>`;}
            else{
            htmlStr += ` <button onclick="rm_link(${eventID},${eid})" class="delBtn">X</button>`;
            }
            htmlStr += "<br>";
        }
        
    if (!htmlStr){
        htmlStr += "None on record<br>"
    }   
        
        if (potentials.length){
            console.log(potentials);
            var dir = "from";
            if (domid == "next"){ dir = "to"}
            
            htmlStr += `<br>create link ${dir}:<br>`;
            htmlStr += `<select id="${domid}pos" onchange="select_add_link('${domid}')">`;
            htmlStr += `<option value="default">${potentials.length} event(s)</option>`;
            for (var i in potentials){
                var eid = toNumber(potentials[i]['event']['identity']);
                var elabel = potentials[i]['event']['properties']['Label'];
                htmlStr += `<option value="${eid}">${elabel}</option>`;
            }
            htmlStr += "</select>";

        }
    //}
    

    $("#"+domid).html(htmlStr);
}
function depend_item_clicked(id){
   var d = _.find(ctl.data.nodes, {id:id});
   ctl.set_active(id)
   item_clicked(d);
}
function select_add_link(domid){
    console.log("select_add_link");

    var id = $("#"+domid+"pos").val();
    
    if (id == "default"){
        return;
    }
    console.log(id);
    console.log(domid+"pos");
    console.log($("#"+domid+"pos"));
    console.log($("#"+domid+"pos").val());
    
    if (id && eventID){
        var sourceid = id;
        var targetid = eventID;
        if (domid == "next"){
            sourceid = eventID;
            targetid = id;
        }
        get(`/api/v1/cases/eventevent/${sourceid}/${targetid}`,function(d){
            if (d.length){
                $("#prompt").html("link created");
            }else{
                $("#prompt").html("link error");
            }
            get_timeline_data(1);
            
            if (!isNaN(eventID)){
                getDependencies(eventID);
            }else{
                list_nodes("next", [], [])
                list_nodes("previous", [], [])
            }
        })
    }
}


</script>



<br>
<br>
<br>

<div class="debug">
known issues: 
<li>When connecting all the end nodes to form a complete loop, the button to add new event will not appear</li>
<li>Todo: user input to remove links</li> <!--del("/api/v1/cases/eventevent/188/187")-->
<li>Check for link sanity to avoid - 1. loop back onto itself, 2. loop back from a future event to a past event (i.e past event depends on the completion of a future event) </li>
<li>It is possible to input completed date BEFORE the start date - which we may assume that is impossible in reality. Todo: sanity check will be put in place, Events with dates that does not make sense will be shown and tagged as "error"
<li>It is possible to mark Event as Completed in the future - which we may assume that is impossible in reality. Todo: sanity check will be put in place
</div>
    


<script>
function link_record_init(){
    //show prompt
    $("#prompt").html(`Select an Event in the timeline dependent on the this Event <button onclick="link_record_cancel()">cancel</button>`);
    //set flag
    createlinkBln = 1;
    $('#btn_link').hide();

}
function link_record_cancel(){
    createlinkBln=0;
    $('#btn_link').show();
    $("#prompt").html("");
}


function delete_event_record(){

    if (confirm('Delete?')) {
        delete_event(eventID);
        
        //hide manage event
        $("#manage_event").html("Select an item in the timeline to add or edit");
        $(".manage_event_btn").hide();
    } 
    
}

function delete_event(id){
    if (!isNaN(id)){
        var url = `/api/v1/cases/event/${id}`;
        jqxhr = del(url,{},function(d){get_timeline_data(0);console.log(d)});
    }
}


function rm_link(source,target){
    del(`/api/v1/cases/eventevent/${source}/${target}`,{},function(d){
      console.log(d)
      //refresh
      getDependencies(eventID);
      //ctl.update(1);
      get_timeline_data();
    })
}

</script>

</body>
</html>